name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Existing git tag to release (must start with v)'
        required: true
      prerelease:
        description: 'Mark as pre-release (true/false)'
        required: false
        default: 'false'
  workflow_run:
    workflows: ["Tag on Version Change"]
    types: [completed]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-15
    env:
      SWIFT_VERSION: '6.2'
      PRODUCT_EXECUTABLE: 'telescope-server'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Validate manual dispatch tag format
        if: github.event_name == 'workflow_dispatch'
        run: |
          case "${{ inputs.tag }}" in
            v*) echo "Tag input OK";;
            *) echo "::error::Tag must start with 'v' (e.g. v1.2.3)"; exit 1;;
          esac

      - name: Set VERSION variable
        id: vars
        run: |
          if [ "${{ github.event_name }}" = 'workflow_dispatch' ]; then
            RAW_TAG='${{ inputs.tag }}'
          else
            SRC_VERSION=$(.github/scripts/extract-version.sh)
            if [ -z "$SRC_VERSION" ]; then
              echo '::error::Failed to extract version from source'; exit 1; fi
            RAW_TAG="v$SRC_VERSION"
          fi
          VERSION=${RAW_TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "raw_tag=$RAW_TAG" >> $GITHUB_OUTPUT
          if ! git rev-parse "$RAW_TAG" >/dev/null 2>&1; then
            echo "::error::Tag $RAW_TAG not found (expected it to be created by tag workflow)"; exit 1
          fi
          echo "Derived version: $VERSION (tag: $RAW_TAG) from event: ${{ github.event_name }}"          

      - name: Skip if release already exists
        id: maybe_skip
        run: |
          code=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.vars.outputs.raw_tag }}")
            if [ "$code" = "200" ]; then
              echo "Release for ${{ steps.vars.outputs.raw_tag }} already exists. Skipping build." | tee -a $GITHUB_STEP_SUMMARY
              echo "skip=true" >> $GITHUB_OUTPUT
            else
              echo "skip=false" >> $GITHUB_OUTPUT
            fi

      - name: Stop early (release exists)
        if: steps.maybe_skip.outputs.skip == 'true'
        run: echo "Exiting early because release already exists." && exit 0

      - name: Verify tag matches source version
        if: steps.maybe_skip.outputs.skip != 'true'
        run: |
          src_ver=$(.github/scripts/extract-version.sh)
          if [ "$src_ver" != "${{ steps.vars.outputs.version }}" ]; then
            echo "::error::Tag version ${{ steps.vars.outputs.version }} does not match source version $src_ver"; exit 1; fi
            echo "Tag version matches source version: $src_ver"

      - name: Cache Swift build
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-swift-${{ env.SWIFT_VERSION }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swift-${{ env.SWIFT_VERSION }}-
      - name: Cache Swiftly toolchains
        uses: actions/cache@v4
        with:
          path: ~/.swiftly/toolchains
          key: ${{ runner.os }}-swiftly-${{ env.SWIFT_VERSION }}
          restore-keys: |
            ${{ runner.os }}-swiftly-

      - name: Install Swiftly and Swift ${{ env.SWIFT_VERSION }}
        run: |
          set -euxo pipefail
          # Install Swiftly (idempotent across cache restores)
          if [ ! -x "$HOME/.swiftly/bin/swiftly" ]; then
            curl -sS -O https://download.swift.org/swiftly/darwin/swiftly.pkg
            installer -pkg swiftly.pkg -target CurrentUserHomeDirectory
            ~/.swiftly/bin/swiftly init --quiet-shell-followup
          fi
          . "${SWIFTLY_HOME_DIR:-$HOME/.swiftly}/env.sh"
          # Install / select toolchain
          swiftly install "${SWIFT_VERSION}"
          swiftly use "${SWIFT_VERSION}"
          swift --version

      - name: Build (release)
        if: steps.maybe_skip.outputs.skip != 'true'
        run: |
          . "${SWIFTLY_HOME_DIR:-$HOME/.swiftly}/env.sh"
          swift build -c release --arch arm64 --arch x86_64

      - name: Run tests (arm64 only)
        if: steps.maybe_skip.outputs.skip != 'true'
        run: |
          . "${SWIFTLY_HOME_DIR:-$HOME/.swiftly}/env.sh"
          swift test -c release --arch arm64

      - name: Collect artifacts
        if: steps.maybe_skip.outputs.skip != 'true'
        run: |
          mkdir -p artifacts
          RAW_TAG='${{ steps.vars.outputs.raw_tag }}'
          DEST=artifacts/${PRODUCT_EXECUTABLE}-${RAW_TAG}-macOS-universal
          cp .build/apple/Products/Release/${PRODUCT_EXECUTABLE} "$DEST"
          chmod +x "$DEST"
          strip -x "$DEST" || true
          shasum -a 256 "$DEST" > "$DEST.sha256"

      - name: Upload artifacts (workflow)
        if: steps.maybe_skip.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: telescope-binaries-${{ steps.vars.outputs.version }}
          path: artifacts/*
          if-no-files-found: error

      - name: Create GitHub Release
        if: steps.maybe_skip.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          name: Telescope v${{ steps.vars.outputs.version }}
          tag_name: ${{ steps.vars.outputs.raw_tag }}
          generate_release_notes: true
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.prerelease == 'true' }}
          files: |
            artifacts/${{ env.PRODUCT_EXECUTABLE }}-${{ steps.vars.outputs.raw_tag }}-macOS-universal
            artifacts/${{ env.PRODUCT_EXECUTABLE }}-${{ steps.vars.outputs.raw_tag }}-macOS-universal.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
